image -> container -> stopped container
### RUN vs CMD
# can have multiple runs only one cmd
# run executes command on new layer, commits output/changes/ to the final image
# cmd provides default behaviour when launching instance of the image
# RUN["echo","hi"] => exec form, passed as JSON array, does not invoke a shell
# RUN echo hi      => runs in the default shell for the image,allows variable substitution & other shell stuff
### ENV vs ARG
# ENV - persists thru build, also when image is runned as container
# ARG - can be passed into the build command
### LABEL - key, value pairs attached as metadata. Informative purpose only
docker images
docker run -it ubuntu:latest bash # this runs it with main process bash
docker ps -a (all)
docker ps -l (last)
docker run -d -it ubuntu bash (deatached mode )
ctrl + p  ctrl + q -> exit , but process runs(kinda deatach)
docker commit ( takes container - makes image from it )
docker commit <id/name> name:version
docker exec (spawns new process, cannot modify networks, volumes etc.)
docker run --rm -it name process ( dont save container after exit )
docker run -it ubuntu bash -c "sleep 3; echo all done" ( -c wat to run )
docker attach <container> (attach to main process)
docker attach --sig-proxy=false <containeer> (attach in such way that ctrl + c doesnt kill container)
docker kill/stop <container name>
### ports
docker run --rm -ti -p 45678:45678 -p 45679:45679 --name top-server ubuntu bash
#inside nc -lp 45678 | nc -lp 45679
#open new container
docker run --rm -it -p 4444:4444 -p 5555:5555 --name top-serv ubuntu bash
nc -lp 4444 | nc -lp 5555
###DOCKER LOCALHOST REF host.docker.internal  ###
nc localhost 4444
### dynamic ports
docker run --rm -it -p 12345 ubuntu:nc bash
docker port <container>
### container networking
docker network ls
docker network create learning
docker run --rm -it --net learning --name catserver ubuntu:14.04 bash
... dogserver
nc dogserver 1234 and nc -lp 1234
docker network create catsonly
docker network connect catsonly catserver
### legacy linking - one way only, secrets also linked
docker run --rm -it -e secret=top --net catsonly --name catserver ubuntu:14.04 bash
docker run --rm -it --net catsonly --name dogserver --link catserver ubuntu:14.04 bash
### images (docker pull, used auto by docker run)
docker images
docker rmi <image:tag/ID> 
### volumes - 'virtual' disks to store and share data
### persistant ones and 'ephemeral'
# backup named volumes
docker run --rm -v api_dbdata:/datatobackupishere -v $(pwd):/backupdir ubuntu tar cvf /backupdir/backup.tar /datatobackupishere
docker volume rm api_dbdata
docker volume create api_dbdata
docker run --rm -v api_dbdata:/restorehere -v $(pwd):/backupishere ubuntu bash -c "cd /restorehere && tar xvf /backupishere/backup.tar --strip 1"
# end
mkdir ~/example
docker run -it -v ~/example:/shared-folder ubuntu:nc bash
# for single file - file must exist before container start
### volumes-from - shared discs that exist as long as they are being used
docker run -it -v /shared-data ubuntu bash # create
docker run -it --volumes-from 5f201ab0ab89 ubuntu bash # use
# you can pass volumes from one to another to third container
### registries
docker search
docker tag ubuntu phiratio/top-image:xxl
docker push phiratio/top-image:xxl
### dockerfiles
docker build -t name-of-result -f <dockerfilepath> .(place where dockerfile is)
# process started on one line will not be running on the next line
# each line is like docker run and commit
# if ENV is used - remember the above
docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker sh
the inside docker run -it --rm ubuntu bash
### bridging
# docker uses bridges to create virtual networks in your computer. These are software switches.
# They control the Ethernet layer, you can turn them off with --net=host
### routing
# uses iptables to do controlling
# exposing port is actually prot forwarding
sudo iptables -n -L -t nat
#--privileged=true -> full control over the host system
#combo with --net=host
docker inspect --format '{{.State.Pid}}' <container name/id>
### registry
docker run -d -p 5000:5000 --restart=always --name registry registry
docker tag ubuntu localhost:5000/topcompany/ubuntu:top
docker push localhost:5000/topcompany/ubuntu:top
docker save -o my-images.tar.gz image1:2 image2 ubuntu:latest
docker load -i my-images.tar.gz
### mounts
docker container run -d --mount type=bind,source=/app,target=/app nginx
#error - bind source path doesn't exist - with volumes you don't have to create the point ahead of time, with binds you have to create the folder !
### best practices ###
# use small base image (alpine or slim)
# combine layers ( 1 RUN command instead of two )
# .dockerignore
# keep your final stage small ( have a lot of intermediate build steps )
# use non root user if root is not needed (but avoid switchin users during build -> extra layers)
# use HEALTHCHECK command

# DNS round robin
docker network create botnet
docker container run -d --network botnet --network-alias search  elasticsearch:2
docker container run -d --network botnet --network-alias search  elasticsearch:2
docker container run --rm -it --network botnet alpine
 # nslookup search
docker container run --rm -it --network botnet centos
 # curl -s search:9200  # few times

# healthcheck example
docker run --rm \
--health-cmd="curl -f localhost:9200/_cluster/health||false" \
--health-interval=5s \
--health-retries=3 \
--health-timeout=2s \
--health-start-period=15s \
elasticsearch:2
